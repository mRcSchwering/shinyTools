status <- reactiveFileReader(500, session, file.path(pwd, paste0(id, "ifof.status")),
function(x) if(file.exists(x)) ReadInfo(x) else NULL)
result <- eventReactive(status(), {
error$text <- NULL
out <- list(finished = NULL, result = NULL, error = FALSE, progress = NULL)
if( !is.null(status()) ){
out$progress <- status()$progress
if( status()$progress == "1" ){
out$finished <- Sys.time()
if( is.null(status()$status) ){
out$result <- readRDS(file.path(pwd, paste0(id, "ifof.rds")))
} else {
out$error <- TRUE
error$text <- status()$status
}
}
}
out
})
output$errorMessage_fin <- renderUI(HTML(paste0("<div style='color:red'>", error$text, "</div>")))
output$result <- renderPrint(result())
output$res2 <- renderPrint(status())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), ProcessFinishUI("process"), verbatimTextOutput("result"))
))
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
source("R/RProcessFinish.R")
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
}
shinyApp(ui, server)
# little app with module
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
shinyApp(ui, server)
Abort
?Abort
??Abort
library(shinyTools)
source("R/RProcessFinish.R")
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
input <- shinyTools::Init("tmp/process-ifof.status")
shinyTools::Log(c("Input is", input))
getwd()
getwd()
setwd(..)
setwd("..")
input <- shinyTools::Init("tmp/process-ifof.status")
shinyTools::Log(c("Input is", input))
input > 100
if(input > 100) shinyTools::Abort("Input greater 100")
roxygen2::roxygenise()
setwd("..")
getwd()
roxygen2::roxygenise()
library(shinyTools)
source("R/RProcessFinish.R")
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
library(ggplot2)
a <- ggplot(mtcars) + geom_path(aes(x = displ, y = cyl))
a
mtcars
str(mtcars)
library(ggplot2)
a <- ggplot(mtcars) + geom_path(aes(x = disp, y = mpg))
a
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
a
rm(a)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
input <- shinyTools::Init("tmp/process-ifof.status")
library(ggplot2)
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
shinyTools::Log(c("Input is", input))
input
input <- 11
library(ggplot2)
a <- ggplot(mtcars) + geom_point(aes(x = disp, y = mpg))
shinyTools::Log(c("Input is", input))
if(input > 100) shinyTools::Abort("Input greater 100")
info <- shinyTools::Up(0.8)
res <- shinyTools::Try(dpois(1:100, input))
shinyTools::Fin(res)
setwd("..")
getwd()
setwd("shinyTools")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("dpois"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Plot is created in R batch script with 4s delay.")
),
mainPanel(h2("Plot Output"), RProcessFinishUI("process"), plotOutput("plot"), verbatimTextOutput("result"))
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$result <- renderPrint(result())
output$plot <- renderPlot(plot(1:100, result()$result))
}
shinyApp(ui, server)
?actionButton
library(shinyTools)
?actionButton
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Poisson Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay."),
br(),
actionButton("num2", "check responsiveness"),
verbatimTextOutput("num2"),
helpText("By clicking on the button you can see that the app is still responsive while running the R batch script.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process"),
plotOutput("plot"),
h3("Return value of RProcessFinish")
verbatimTextOutput("result")
)
))
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Poisson Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay."),
br(),
actionButton("num2", "check responsiveness"),
verbatimTextOutput("num2"),
helpText("By clicking on the button you can see that the app is still responsive while running the R batch script.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process"),
plotOutput("plot"),
h3("Return value of RProcessFinish"),
verbatimTextOutput("result")
)
))
server <-function(input, output, session) {
output$num2 <- renderPrint(input$num2)
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
??touch
normalizePath(NULL)
getwd()
list.files()
file.create("test.txt")
file.create("test.txt")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Poisson Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay."),
br(),
actionButton("num2", "check responsiveness"),
verbatimTextOutput("num2"),
helpText("By clicking on the button you can see that the app is still responsive while running the R batch script.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process"),
plotOutput("plot"),
h3("Return value of RProcessFinish"),
verbatimTextOutput("result")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = NULL, pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
devtools::install(build_vignettes = TRUE)
library(shinyTools)
browseVignettes("shinyTools")
?RProcessFinish
getwd()
devtools::build_vignettes()
devtools::build_vignettes("shinyTools")
browseVignettes("shinyTools")
getwd()
list.files("tmp")
input <- shinyTools::Init("tmp/process-ifof.status")
info2 <- info
?file.path
?grep(info$logFile
?grep
?grep
?grep
?grep
?grep
grep(paste0("^.*", .Platform$file.sep), ".*?$"), info$logFile)
grep(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
grep("...$", "asdasdsnajsndna")
grexprp(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
gregexpr(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
strsplit(info$logFile, .Platform$file.sep)
?tail
tail(strsplit(info$logFile, .Platform$file.sep))
tail(unlist(strsplit(info$logFile, .Platform$file.sep)))
tail(unlist(strsplit(info$logFile, .Platform$file.sep)), n = 1)
tail(unlist(strsplit("./asd/asd.txt", .Platform$file.sep)), n = 1)
tail(unlist(strsplit("./asd.txt", .Platform$file.sep)), n = 1)
tail(unlist(strsplit("asd.txt", .Platform$file.sep)), n = 1)
?dnorm
getwd()
setwd("..")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
verbatimTextOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
verbatimTextOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPlot(plot(1:100, result2()$result))
}
shinyApp(ui, server)
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPlot(plot(1:100, result2()$result))
}
shinyApp(ui, server)
