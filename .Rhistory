callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
??touch
normalizePath(NULL)
getwd()
list.files()
file.create("test.txt")
file.create("test.txt")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Poisson Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay."),
br(),
actionButton("num2", "check responsiveness"),
verbatimTextOutput("num2"),
helpText("By clicking on the button you can see that the app is still responsive while running the R batch script.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process"),
plotOutput("plot"),
h3("Return value of RProcessFinish"),
verbatimTextOutput("result")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "./log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = NULL, pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
devtools::install(build_vignettes = TRUE)
library(shinyTools)
browseVignettes("shinyTools")
?RProcessFinish
getwd()
devtools::build_vignettes()
devtools::build_vignettes("shinyTools")
browseVignettes("shinyTools")
getwd()
list.files("tmp")
input <- shinyTools::Init("tmp/process-ifof.status")
info2 <- info
?file.path
?grep(info$logFile
?grep
?grep
?grep
?grep
?grep
grep(paste0("^.*", .Platform$file.sep), ".*?$"), info$logFile)
grep(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
grep("...$", "asdasdsnajsndna")
grexprp(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
gregexpr(paste0("^.*", .Platform$file.sep, ".*?$"), info$logFile)
strsplit(info$logFile, .Platform$file.sep)
?tail
tail(strsplit(info$logFile, .Platform$file.sep))
tail(unlist(strsplit(info$logFile, .Platform$file.sep)))
tail(unlist(strsplit(info$logFile, .Platform$file.sep)), n = 1)
tail(unlist(strsplit("./asd/asd.txt", .Platform$file.sep)), n = 1)
tail(unlist(strsplit("./asd.txt", .Platform$file.sep)), n = 1)
tail(unlist(strsplit("asd.txt", .Platform$file.sep)), n = 1)
?dnorm
getwd()
setwd("..")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
verbatimTextOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
verbatimTextOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPrint(result2())
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPlot(plot(1:100, result2()$result))
}
shinyApp(ui, server)
shinyApp(ui, server)
roxygen2::roxygenise()
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPlot(plot(1:100, result2()$result))
}
shinyApp(ui, server)
devtools::build()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes("shinyTools")
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(plot(1:100, result1()$result))
output$plot2 <- renderPlot(plot(1:100, result2()$result))
}
shinyApp(ui, server)
shinyApp(ui, server)
?RProcessStart
?Fin
?Try
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(if(is.null(result1()$result)) NULL else plot(1:100, result1()$result))
output$plot2 <- renderPlot(if(is.null(result2()$result)) NULL else plot(1:100, result2()$result))
}
shinyApp(ui, server)
devtools::build()
devtools::install(build_vignettes = TRUE)
browseVignettes("shinyTools")
browseVignettes("shinyTools")
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay.")
),
mainPanel(
h3("Poisson Distribution"),
plotOutput("plot")
)
))
roxygen2::roxygenise()
devtools::install()
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay.")
),
mainPanel(
h3("Poisson Distribution"),
plotOutput("plot")
)
))
server <-function(input, output, session) {
result <- callModule(RProcess, "process", trigger = reactive(input$trigger), object = reactive(input$num1), script = "./process.R")
output$plot <- renderPlot(if(is.null(result()$result)) NULL else plot(1:100, result()$result))
}
shinyApp(ui, server)
roxygen2::roxygenise()
devtools::install()
library(shinyTools)
?ReadInfo
??shinyTools
?shinyTools
roxygen2::roxygenise()
devtools::install()
library(shinyTools)
?ReadInfo
roxygen2::roxygenise()
devtools::install()
library(shinyTools)
?Rscript_Log
roxygen2::roxygenise()
devtools::install()
library(shinyTools)
?Rscript_Init
roxygen2::roxygenise()
devtools::install()
roxygen2::roxygenise()
devtools::install()
?shinyTools::Rscript_Up
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(shiny)
ui <- fluidPage(
navbarPage("Menu",inverse=TRUE,fluid=TRUE,collapsible=TRUE,selected = "Data  input",
tabPanel("Data input",
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File', accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator', c(Comma=',', Semicolon=';', Tab='\t'),','),
radioButtons('quote', 'Quote', c(None='', 'Double Quote'='"', 'Single Quote'="'"),'"')
),
mainPanel(
tableOutput('contents')
)
)
),
tabPanel( "Summary", fluidRow(column(6, tableOutput("summary"))))
))
server <- function(input, output)
{
mydata <- reactive({
inFile <- input$file1
if(is.null(inFile)) return(NULL)
data<-read.csv(inFile$datapath, header = input$header, sep = input$sep, quote = input$quote)
data
})
output$contents <- renderTable({
mydata()
})
output$summary <- renderTable({
m <- lm(mydata()[,1]~mydata()[,2])
summary(m)$r.squared
})
}
shinyApp(ui, server)
list()
a <- list()
a
str(a)
append(a, "asd")
append(a, "asd", "asd2")
append(a, "asd")
numeric()
append(numeric(), 1)
append(append(numeric(), 1), 2)
?shinyTools::Rscript_Init
roxygen2::roxygenise()
devtools::install()
?shinyTools::RProcess
roxygen2::roxygenise()
devtools::install()
?shinyTools::RProcess
roxygen2::roxygenise()
devtools::install()
?shinyTools::RProcess
?shinyTools::RProcess
roxygen2::roxygenise()
devtools::install()
?shinyTools::RProcess
vignette("RProcess Module Functions", package = "shinyTools")
vignette("RProcess_functions", package = "shinyTools")
browseVignettes("shinyTools")
roxygen2::roxygenise()
devtools::build()
devtools::install(build_vignettes = TRUE)
browseVignettes("shinyTools")
vignette("RProcess Module Functions", package = "shinyTools")
vignette("RProcess_functions", package = "shinyTools")
?shinyTools::RProcessFinishUI
devtools::build()
devtools::install(build_vignettes = TRUE)
roxygen2::roxygenise()
devtools::build()
devtools::install(build_vignettes = TRUE)
browseVignettes("shinyTools")
library(shinyTools)
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay.")
),
mainPanel(
h3("Poisson Distribution"),
plotOutput("plot")
)
))
server <-function(input, output, session) {
result <- callModule(RProcess, "process", trigger = reactive(input$trigger), object = reactive(input$num1), script = "./process.R")
output$plot <- renderPlot(if(is.null(result()$result)) NULL else plot(1:100, result()$result))
}
shinyApp(ui, server)
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distribution"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in R batch script with a few seconds delay."),
br(),
actionButton("num2", "check responsiveness"),
verbatimTextOutput("num2"),
helpText("By clicking on the button you can see that the app is still responsive while running the R batch script.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process"),
plotOutput("plot"),
h3("Return value of RProcessFinish"),
verbatimTextOutput("result")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process.R", logFile = "log/log.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result <- callModule(RProcessFinish, "process", pwd = "./tmp")
output$plot <- renderPlot(if(is.null(result()$result)) NULL else plot(1:100, result()$result))
output$result <- renderPrint(result())
output$num2 <- renderPrint(input$num2)
}
shinyApp(ui, server)
library(shinyTools)
check <- function(object, add){ if(object <= add$n) return(paste("Lambda must be greater", add$n, "idiot!"))}
ui <- fluidPage(sidebarLayout(
sidebarPanel(
h2("Distributions"),
numericInput("num1", "set lambda", 10, -10, 50),
RProcessStartUI("process1"),
actionButton("trigger", "Start"),
helpText("Poisson distribution is created in a first R batch script which takes a few seconds.
Before this script finishes a second R batch script is started by the first one.
This calculates a normal distribution with lambda as mean.")
),
mainPanel(
h3("Poisson Distribution"),
RProcessFinishUI("process1"),
plotOutput("plot1"),
h3("Normal Distribution"),
RProcessFinishUI("process2"),
plotOutput("plot2")
)
))
server <-function(input, output, session) {
callModule(RProcessStart, "process1", trigger = reactive(input$trigger), object = reactive(input$num1),
script = "./scripts/process1.R", logFile = "log/log1.log", pwd = "./tmp", sessionid = "asd",
checkFun = "check", addArgs = list(n = 0))
result1 <- callModule(RProcessFinish, "process1", pwd = "./tmp")
result2 <- callModule(RProcessFinish, "process2", pwd = "./tmp")
output$plot1 <- renderPlot(if(is.null(result1()$result)) NULL else plot(1:100, result1()$result))
output$plot2 <- renderPlot(if(is.null(result2()$result)) NULL else plot(1:100, result2()$result))
}
shinyApp(ui, server)
?Rscript_Start
shinyApp(ui, server)
