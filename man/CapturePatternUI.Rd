% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CapturePattern.R
\name{CapturePatternUI}
\alias{CapturePatternUI}
\title{CapturePatternUI}
\usage{
CapturePatternUI(id, label)
}
\arguments{
\item{id}{chr id of this object for shiny session}

\item{label}{chr or NULL a lable/ title for the file upload}
}
\value{
chr HTML for creating ui elements.
}
\description{
The CapturePattern Module extracts captures from chr strings based on a regular expression and displays them.
}
\details{
The UI part is a text output of several lines.
}
\examples{
library(shinyTools)

# some generic strings with regular expressions
regexes <- list("^(.+?)_.*$", "^(.+?)_(.*?)_(.*?)\\\\.(.*)$", "^.*(SG.+?)1.*_(.+?)_.*$")
lib <- paste0("ENSG00000139", apply(expand.grid(0:9, 0:9, 0:9, "_8_", sample(20000:60000, 5), ".", sample(20000:60000, 5)),
                                    1, function(x) paste0(x, collapse = "")))
# little app with module
ui <- fluidPage(sidebarLayout(
  sidebarPanel( width = 4, h2("Pattern as input"), p("Not part of Module UI"),
                selectizeInput("regex", "Regex", choices = regexes, options = list(create = TRUE)),
                helpText("Write your own Regex to try out.")
  ),
  mainPanel( width = 8, h2("CapturePatternUI"),
             CapturePatternUI("cap", "Patterns Captured")
  )
))

server <-function(input, output, session) {
  callModule(CapturePattern, "cap", pat = reactive(input$regex), lines = reactive(lib))
}

shinyApp(ui, server)

}
\seealso{
Other CapturePattern module functions: \code{\link{CapturePattern}},
  \code{\link{GetCaptures}}
}

