% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProcessFunctions.R
\name{Rscript_Try}
\alias{Rscript_Try}
\title{Rscript_Try}
\usage{
Rscript_Try(expr, ignore = FALSE, info = NULL)
}
\arguments{
\item{expr}{R expression to be evaluated}

\item{ignore}{bool (FALSE) whether the script should continue after an error occured}

\item{info}{ProcessInfo object or NULL (NULL).
This is a list of relevant information about the process.
It can be created with \code{\link{RProcessInit}}.
If NULL the global environment is searched for an object of class ProcessInfo.}
}
\value{
NULL (if error occured) or result of evaluated expr
}
\description{
This function is used to write log messages for a R script run by a RProcess module such as \code{\link{RProcess}}.
}
\details{
A convenience function for wrapping an expression in try and recovering from an error.

This is intended for use in an R batch script if it was started by a shiny session using the RProcess module.
If the batch script stops because of some error, the shiny session will never know about this.
By wrapping an error-prone expression in this function, a signal that the script failed is given to the shiny session (if ignore = FALSE).
If a log file exists, an entry is made.
This information is taken from the ProcessInfo object.

The communication happens via a *.status file.
Information provided by RProcess module is handed over to the R batch process via this file.
Conversely the R batch process writes on this file to hand over status updates to the shiny session.
By using the functions \code{\link{Rscript_Init}}, \code{\link{Rscript_Up}}, \code{\link{Rscript_Log}}, \code{\link{Rscript_Try}},
\code{\link{Rscript_Fin}} it is ensured that the communication bewteen shiny session and R batch script work and
that no files are falsly overwritten.

If a session id exists, the log message is prefixed with it.
If a process id exists, before writing anything the loaded process id is compared with the current one -- read from the *.status file.
If they do not match, quit() is run.
This ensures that, in case a newer version of the same process is running, the current one will quit and not overwrite anything.
}
\examples{

}
\seealso{
These Rscript communication functions are used in R scripts started by a RProcess module such as \code{\link{RProcess}}.
         For some examples on how they work together see the vignette \emph{RProcess Module Functions}.

Other Rscript communication functions: \code{\link{ReadInfo}},
  \code{\link{Rscript_Abort}}, \code{\link{Rscript_Fin}},
  \code{\link{Rscript_Init}}, \code{\link{Rscript_Log}},
  \code{\link{Rscript_Start}}, \code{\link{Rscript_Up}}
}

