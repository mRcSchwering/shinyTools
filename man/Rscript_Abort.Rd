% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProcessFunctions.R
\name{Rscript_Abort}
\alias{Rscript_Abort}
\title{Rscript_Abort}
\usage{
Rscript_Abort(status, log = c("Process aborts:", status), info = NULL)
}
\arguments{
\item{status}{\code{chr} of status, which will be rendered as error message in the shiny session}

\item{log}{\code{chr} arr used as log entry if a log file exists (\code{c("Process aborts:", status)}). Each element is 1 line.}

\item{info}{\emph{ProcessInfo} object or \code{NULL} (\code{NULL}).
This is a list of relevant information about the process.
It can be created with \code{\link{Rscript_Init}}.
If \code{NULL} the global environment is searched for an object of class \emph{ProcessInfo}.}
}
\description{
This function is used to terminate a R script run by a RProcess module such as \code{\link{RProcess}}.
It will send a error message to the shiny session and end the R session with \code{quit}.
This way it can be used to make quality checks before handing data back to the shiny session.
}
\details{
As in \code{\link{Rscript_Fin}} progress in the \code{*.status} file is set to 1, signalling the shiny session that the script has finished.
However, the status parameter in this file is filled with an error message.
The shiny session will not read the output of the R script but instead render the error message.

For correct communication with the shiny session an \emph{ProcessInfo} object given (argument \code{info}).
If a log file exists, it is appended with the message given in argument \code{log}. Each element is a line.
If a session id exists the log is prefixed with it.
If a process id exists, before writing anything the loaded process id is compared with the current one -- read from the \code{*.status} file.
If they do not match the R session ends with a call to \code{quit}.
This ensures that, in case a newer version of the same process is running, the current one will quit and not overwrite anything.
}
\seealso{
These Rscript communication functions are used in R scripts started by a RProcess module such as \code{\link{RProcess}}.
         For some examples on how they work together see the vignette \emph{RProcess Module Functions}.

Other Rscript communication functions: \code{\link{ReadInfo}},
  \code{\link{Rscript_Fin}}, \code{\link{Rscript_Init}},
  \code{\link{Rscript_Log}}, \code{\link{Rscript_Start}},
  \code{\link{Rscript_Try}}, \code{\link{Rscript_Up}}
}

