% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RProcess.R
\name{RProcess}
\alias{RProcess}
\title{RProcess}
\usage{
RProcess(input, output, session, trigger, object, script, logFile = NULL,
  sessionid = NULL, pwd = getwd(), checkFun = NULL, addArgs = NULL,
  millis = 1000)
}
\arguments{
\item{input}{argument used by shiny session}

\item{output}{argument used by shiny session}

\item{session}{argument used by shiny session}

\item{trigger}{reactive which starts the process (e.g. action button input)}

\item{object}{reactive object that will be handed over to R batch script as input}

\item{script}{\code{chr} path to R batch script (name of file included)}

\item{logFile}{\code{chr} or \code{NULL} (\code{NULL}) path of (desired) logging file (name included)}

\item{sessionid}{\code{chr} or \code{NULL} (\code{NULL}) id for the session. Log entries will be prefixed with it.}

\item{pwd}{\code{chr} (\code{getwd()}) path of R batch process working directory.
That's where intermediate files will appear as well.}

\item{checkFun}{\code{chr} or \code{NULL} (\code{NULL}) if not \code{NULL} name of a function which can be used as a quality check for object
right before it is handed ober to the R batch script}

\item{addArgs}{\code{list} or \code{NULL} (\code{NULL}) if not NULL list of additional arguments which will be passed to checkFun}

\item{millis}{\code{int} (1000) of the time interval in milli seconds in which to read the \code{*.status} file for possible changes}
}
\value{
\emph{list} with elements 4 elements
\itemize{
  \item \emph{finished} indicating the time at which the R script has finished (\code{NULL} if not finished yet)
  \item \emph{result} the actual output of the R script (\code{NULL} if not finished yet)
  \item \emph{error} if the R script finished with an error, a relevant message is given here as \code{chr} (\code{NULL} if no error occured)
  \item \emph{progress} \code{num} indicating progress of R script (1 if finished, [0,1[ if running, \code{NULL} otherwise)
}
}
\description{
This module starts and then observes a custom R script as a background process.
 The app stays responsive while the R script is running.
 The communication between the shiny session and the R script is done via a \code{*.status} file.
 Input and output are handed via a \code{*.rds} file.
}
\details{
To ensure that the communication between the shiny session and the R script is working properly, use \code{\link{Rscript_Init}}
 to start the script and \code{\link{Rscript_Fin}} to finish it.
}
\seealso{
For further information see the documentation of Rscript communication such as \code{\link{Rscript_Init}}.
         Examples can be found in the vignette \emph{RProcess Module Functions}.

Other RProcess module functions: \code{\link{RProcessFinishUI}},
  \code{\link{RProcessFinish}},
  \code{\link{RProcessStartUI}},
  \code{\link{RProcessStart}}, \code{\link{RProcessUI}}
}

